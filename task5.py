"""
5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
У пользователя необходимо запрашивать новый элемент рейтинга.
Если в рейтинге существуют элементы с одинаковыми значениями,
то новый элемент с тем же значением должен разместиться после них.
Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].
"""

"""
Я правильно понимаю, что второе решение лучше, т.к. и короче и проще?
"""

print("Решение первое\n", "*" * 20)
my_list = [7, 5, 3, 3, 2]
item = 0
print("Введите натуральное число для пополнения рейтинга. Для окончания нажмите q")
while True:
    while True:
        item = input(">>>")
        if item.isdigit() or item == "q":
            break
        print("Ошибка! Введено не натуральное число!")
    if item == "q":
        break
    my_list.append(int(item))
    buff_list = my_list.copy()
    result_list = []
    while buff_list:
        max_item = max(buff_list)
        result_list.append(max_item)
        buff_list.remove(max_item)
    print(f"Пользователь ввел число {item}. Результат: {result_list}")

print("*" * 20, "\nРешение второе")
my_list = [7, 5, 3, 3, 2]
item = 0
print("Введите натуральное число для пополнения рейтинга. Для окончания нажмите q")
while True:
    while True:
        item = input(">>>")
        if item.isdigit() or item == "q":
            break
        print("Ошибка! Введено не натуральное число!")
    if item == "q":
        break
    my_list.append(int(item))
    my_list.sort(reverse=True)
    print(f"Пользователь ввел число {item}. Результат: {my_list}")
